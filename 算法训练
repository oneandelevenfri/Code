###k好数

#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;

const int maxn = 101;
const int mod = 1000000007;

int f[maxn][maxn];              //f[i][j]表示i位数，最后一位是j的k好数的个数，其中f[i][j] = sum(f[i-1][j]);

int main()
{
    int l, k;
    while(cin >> k>> l)
    {
        if(l == 1)             //一位数的话就直接是k-1个了
        {
            cout << k-1 << endl;
            continue;
        }
        memset(f,0,sizeof f);
        for(int j = 0; j < k; j++)         //如果是一位数，那么每个小于k的数就是1
        {
            f[1][j] = 1;
        }
        for(int i = 2; i < l; i++)         //两位数以上的判断
        {
            for(int j = 0; j < k; j++)     //在放好i-1位数后放下一个，这个数和循环中的i-1位数的最后每一位都不能相邻
            {
                int cnt = 0;               //不断计算放一位数字
                for(int r = 0; r < k; ++r)
                {
                    if(r == j + 1 ||r == j - 1)continue;  //判断要放的j是否是已放好的i-1位数的最后每一位r的邻位
                    cnt = (cnt + f[i-1][r]) % mod;        //cnt的值即为其本身加上放好前i-1位且最后一位放的是r的个数，因为前i-1位数放好后继续放下一位，此时的下一位必须是循环的这一个
                }
                f[i][j] = cnt;
            }
        }
        int sum = 0;
        for(int j = 1; j < k; ++j)
        {
            int cnt = 0;
            for(int r = 0; r < k; ++r)
            {
                if(r == j + 1 ||r == j - 1)continue;
                cnt = (cnt + f[l-1][r]) % mod;
            }
            sum = (sum + cnt)%mod;
        }
        cout<< sum <<endl;
    }
    return 0;
}

###SPFA算法
#include<cstdio>
#include<iostream>
#include<cstring>
#include<queue>
#include <limits.h>
using namespace std;
const int MAXN = 20001;
const int MAXL = 200001;
const int INF = INT_MAX;
int dist[MAXN];          //dist[x]表示从源点到x所需的最短距离，初始为INF
int head[MAXN];
int M;      //边的索引
bool inQueue[MAXN];
queue<int> Q;           //队列Q用来存放可松弛周围结点的结点
struct Edge{
        int value;
        int to;
        int next;
    }edge[MAXL];                   //采用链式前向星存储边集

    //构建边集合
void add(int from, int to, int value){
        edge[M].to = to;
        edge[M].next = head[from];
        edge[M].value = value;
        head[from] = M++;
    }

    //SPFA算法
void SPFA(int start){
        dist[start] = 0;             //源点到自己的距离为0
        Q.push(start);
        inQueue[start] = true;
        while (!Q.empty()){
            int temp = Q.front();        //取队头元素
            Q.pop();
            for (int j = head[temp]; j != -1; j = edge[j].next){
                int toNode = edge[j].to;
                if (dist[toNode] > dist[temp] + edge[j].value){        //本题保证无负环，否则需要利用一个数组判断j是否入队超过n次
                    dist[toNode] = dist[temp] + edge[j].value;
                    if (!inQueue[toNode]){
                        Q.push(toNode);
                        inQueue[toNode] = true;
                    }
                }
            }
            inQueue[temp] = false;
        }
    }
int main(){
    memset(head, -1, sizeof(head));
    int n, m;
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; i++){         //初始化
            dist[i] = INF;
            inQueue[i] = false;
        }

    for (int p = 1; p <= m; p++){
            int from, to, value;
            scanf("%d%d%d", &from, &to, &value);            //用cin速度好像要慢一倍= =
            add(from, to, value);
        }
    /*cout<<"print out EDGE:"<<endl;
    for(int i = 0; i<=M;i++)
        {
            cout<<i<<" ";
            cout<<edge[i].to<<" ";
            cout<<edge[i].next<<" ";
            cout<<edge[i].value<<" ";
            cout<<head[i]<<endl;
        }*/
    SPFA(1);
    for (int x = 2; x <= n; x++){
            printf("%d\n", dist[x]);
        }
    return 0;
    }
